{"version":3,"sources":["serviceWorker.js","routes/Page404.jsx","components/Spinner/Spinner.jsx","actions/apiCalls.js","actions/githubActions.js","containers/Home/Home.jsx","routes/Routes.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Page404","className","Spinner","props","size","style","height","width","apiCalls","method","url","data","axios","params","github_api_url","process","REACT_APP_GITHUB_API_URL","doGetGithubUserFollowers","userId","a","result","response","Error","error","console","message","Home","getInitialData","setState","fetching","users","allUsers","serverError","handleUserIdDebounced","debounce","value","trim","handleUserId","e","target","handleFollowerNameDebounced","followerName","state","newUser","filter","user","login","toLowerCase","includes","handleFollowerName","handleSelect","selectedIndex","index","direction","this","id","type","name","placeholder","onChange","maxLength","map","key","alt","src","avatar_url","Component","EmptyComp","Root","basename","exact","path","component","AppBundle","Routes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a985bcb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Fragment } from 'react';\n\nconst Page404 = () => {\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <div className=\"row mt-5 justify-content-center\">\n          <h2>Error 404</h2>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Page404;\n","import React, { Fragment } from \"react\";\n\nimport \"./Spinner.css\";\n\nconst Spinner = (props) => {\n  const size = props.size || \"40px\";\n  return (\n    <Fragment>\n      <div className=\"spin_loader\" style={{ height: size, width: size }}></div>\n    </Fragment>\n  );\n};\n\nexport default Spinner;\n\n// Ex: how to use\n// <Spinner />\n","import axios from \"axios\";\n// import LocalStorageService from \"../services/LocalStorageService\";\n\n// api calls\nexport const apiCalls = (method, url, data = {}) => {\n  if (method === \"get\") {\n    // only for get\n    return axios({ method: method, url: url, params: data });\n  } else {\n    // post, put, delete\n    return axios({ method: method, url: url, data: data });\n  }\n};\n\n/*\n * Added axios global variable\n */\n\n// Add a request interceptor\n// axios.interceptors.request.use(\n//   (config) => {\n//     const token = LocalStorageService.getAccessToken();\n//     if (token) {\n//       config.headers[\"Authorization\"] = `Bearer ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// axios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n","import { apiCalls } from \"./apiCalls\";\n\nconst github_api_url = process.env.REACT_APP_GITHUB_API_URL;\n\nexport const doGetGithubUserFollowers = async (userId) => {\n  const url = github_api_url + `/users/${userId}/followers`;\n  try {\n    const result = await apiCalls(\"get\", url);\n    return result.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.error);\n    } else {\n      console.error(\"github user followers, server err:\", error.message);\n      throw new Error(error.message);\n    }\n  }\n};\n","import React, { Component, Fragment } from \"react\";\nimport { debounce } from \"lodash\";\n\n// common components\nimport Spinner from \"../../components/Spinner/Spinner\";\n\n// actions\nimport { doGetGithubUserFollowers } from \"../../actions/githubActions\";\n\n// css\nimport \"./Home.scss\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fetching: true,\n      allUsers: [],\n      users: [],\n      serverError: \"\",\n      userId: \"\",\n      followerName: \"\",\n    };\n  }\n\n  getInitialData = async (userId) => {\n    try {\n      this.setState({ fetching: false });\n      const users = await doGetGithubUserFollowers(userId);\n      this.setState({ users, allUsers: users, fetching: true });\n    } catch (error) {\n      this.setState({ serverError: error.message, fetching: true });\n    }\n  };\n\n  // componentDidMount() {\n  //   this.getInitialData();\n  // }\n\n  handleUserIdDebounced = debounce((value) => {\n    const userId = value.trim();\n    if (userId) {\n      this.getInitialData(userId);\n    } else {\n      this.setState({ users: [] });\n    }\n  }, 500);\n\n  handleUserId = (e) => {\n    this.setState({ userId: e.target.value });\n    this.handleUserIdDebounced(e.target.value);\n  };\n\n  handleFollowerNameDebounced = debounce((value) => {\n    const followerName = value.trim();\n    const { allUsers } = this.state;\n    if (followerName) {\n      const newUser = allUsers.filter((user) => {\n        return user.login.toLowerCase().includes(followerName.toLowerCase());\n      });\n\n      this.setState({ users: newUser });\n    } else {\n      this.setState({ users: allUsers });\n    }\n  }, 500);\n\n  handleFollowerName = (e) => {\n    this.setState({ followerName: e.target.value });\n    this.handleFollowerNameDebounced(e.target.value);\n  };\n\n  handleSelect = (selectedIndex, e) => {\n    this.setState({\n      index: selectedIndex,\n      direction: e.direction,\n    });\n  };\n\n  render() {\n    const { fetching, users, serverError, userId, followerName } = this.state;\n\n    return (\n      <Fragment>\n        <section id=\"home\">\n          <div className=\"container\">\n            <div className=\"row mt-4\">\n              <div className=\"col-md-12\">\n                <input\n                  className={`ss_input form-control`}\n                  type={\"text\"}\n                  name={\"userId\"}\n                  value={userId}\n                  placeholder={\"Enter github user id\"}\n                  onChange={this.handleUserId}\n                  maxLength={50}\n                />\n              </div>\n            </div>\n\n            <div className=\"row mt-4\">\n              <div className=\"col-md-12\">\n                <input\n                  className={`ss_input form-control`}\n                  type={\"text\"}\n                  name={\"followerName\"}\n                  value={followerName}\n                  placeholder={\"Enter your follower name\"}\n                  onChange={this.handleFollowerName}\n                  maxLength={50}\n                />\n              </div>\n            </div>\n\n            <div className=\"row mt-4 mb-4\">\n              {!fetching && (\n                <div className=\"col-md-12 p-2\">\n                  <Spinner />\n                </div>\n              )}\n\n              {/* {fetching && users.length === 0 && (\n                <div className=\"col-md-12 p-2\">No followers available</div>\n              )} */}\n\n              {fetching &&\n                users.map((user) => {\n                  return (\n                    <div key={user.id} className=\"col-md-3 p-2\">\n                      <div className=\"user_card mt-2\">\n                        <img className=\"user_image\" alt={\"av\"} src={user.avatar_url} />\n                        <div className=\"user_name\">{user.login}</div>\n                      </div>\n                    </div>\n                  );\n                })}\n              {serverError && (\n                <div className=\"text-danger mt-2 mb-2 text-center\">{serverError}</div>\n              )}\n            </div>\n          </div>\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n// 404\nimport Page404 from \"./Page404\";\n\n// home\nimport Home from \"../containers/Home/Home\";\n\n// empty component\nconst EmptyComp = () => {\n  return <div className=\"text-center mt-5\">WIP</div>;\n};\n\nconst Root = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/profile\" component={EmptyComp} />\n\n        {/* 404 */}\n        <Route path=\"*\" component={Page404} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Root;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Routes from \"./routes/Routes\";\n\nconst AppBundle = (\n  <BrowserRouter>\n    <Routes />\n  </BrowserRouter>\n);\n\nReactDOM.render(AppBundle, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}